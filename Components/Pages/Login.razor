@page "/"
@using ExpenseTracker.Model
@using ExpenseTracker.Services
@inject IUserService userService
@inject NavigationManager navigationManager
@inject AuthenticationStateService authStateService

<head>
    <link href="css/login.css" rel="stylesheet" />
</head>

<h3 class="title">Expense Tracker App</h3>
<div class="container">
<div class="form-wrapper">
    
    <form>
        <div class="form-group">
            <label>Username:</label>
            <input type="text" @bind="username" />
        </div>
        <div class="form-group">
            <label>Password:</label>
            <input type="password" @bind="password" />
        </div>
        <button class="form-group" type="button" @onclick="LoginUser">Login</button>
    </form>
    <div class="signup-link">
        Don't have an account? <a href="/register">Sign Up</a>
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error-message">@errorMessage</p>
    }
</div>
</div>
@code {
    private string username;
    private string password;
    private string errorMessage;

    private async Task LoginUser()
    {
        try
        {
            var users = await userService.LoadUserAsync();
            var user = users.FirstOrDefault(u => u.UserName == username && u.Password == HashPassword(password));

            if (user != null)
            {
                // Set the authenticated user in state management
                authStateService.SetAuthenticatedUser(user);

                // Redirect to the dashboard page on login.
                navigationManager.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
    }

    private string HashPassword(string password)
    {
        using (var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(password);
            var hash = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hash);
        }
    }
}
