@page "/transactions"
@using ExpenseTracker.Model
@using ExpenseTracker.Services
@inject ITransactionService transactionService
@inject AuthenticationStateService authStateService
@inject TagService tagService
@inject CalculateTransactionService calculateTransactionService


<head>
    <link href="css/transactions.css" rel="stylesheet" />
</head>


@if (!string.IsNullOrEmpty(alertMessage))
{
    <div>
        @alertMessage
        <button @onclick="ClearAlert">Close</button>
    </div>
}


<container>
    <div class="type-filter-bar">
        <input type="text" placeholder="Search transactions..." @oninput="SearchTransactions" />
        <button @onclick="() => FilterType(0)">Inflow</button>
        <button @onclick="() => FilterType(1)">Outflow</button>
        <button @onclick="() => FilterType(2)">Debt</button>
    </div>

    <div class="filter-bar">
        <label for="dateSort">Start Date</label> <input type="date" @bind="fromDate" placeholder="Start Date" />
         <label for="dateSort">End Date</label><input type="date" @bind="toDate" placeholder="End Date" />
         <button @onclick="ApplyFilters">Apply Filter</button>
        <button @onclick="ClearFilters">Clear Filters</button>
    </div>

    <div class="tag-filter-bar">
        <label for="tagFilter">Filter by Tag:</label>
            <select id="tagFilter" @onchange="FilterByTag">
                <option value="">All Tags</option>
                 @foreach (var tag in tags)
                    {
                        <option value="@tag">@tag</option>
                    }
            </select>
    </div>

    <div class="sort-bar">
        <label for="dateSort">Sort by Date:</label>
        <select id="dateSort"  @onchange="SortTransactions">
            <option value="latest">Latest</option>
            <option value="oldest">Oldest</option>
        </select>
    </div>

    <table>
        <thead>
            <tr>
                <th>Title</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Tag</th>
                <th>Note</th>
                @if (currentFilter == 2) 
                {
                    <th>Source</th>
                    <th>Due Date</th>
                    <th>Status</th>
                }
                <th>Action</th>

            </tr>
        </thead>
        <tbody>
            @if (filteredTransaction != null && filteredTransaction.Any())
            {
                @foreach (var transaction in filteredTransaction)
                {
                    <tr>
                        <td>@transaction.Title</td>
                        @if (authStateService.IsAuthenticated())
                        {
                            <td>@authStateService.GetAuthenticatedUser().Currency @transaction.Amount</td>
                        }
                        <td>@transaction.Date.ToString("MMMM d, yyyy")</td>
                        <td>@(transaction.Tag == "Other" ? transaction.CustomTag : transaction.Tag)</td>

                    
                        <td>@(string.IsNullOrEmpty(transaction.Note) ? "No Note Available" : transaction.Note)</td>
                        @if (currentFilter == 2) 
                        {
                            <td>@transaction.Source</td>
                            <td>@(transaction.DueDate?.ToString("MMMM d, yyyy"))</td>
                            <td>
                                @if (transaction.IsCleared)
                                {
                                    <span>Cleared</span>
                                }
                                else
                                {
                                    <button class= "action-icons" @onclick="() => MarkAsCleared(transaction)" disabled="@transaction.IsCleared">Clear</button>
                                }
                            </td>
                        }
                        <td>

                            <button @onclick="() => DeleteTransaction(transaction.TransactionId)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="@((currentFilter == 2) ? 8 : 6)">No transactions available.</td>
                </tr>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            @if (currentFilter == 0)
            {
                <div>
                    <br/>
                    <h5>Inflow Amount: @totalInflow</h5>
                </div>
            }
            else if (currentFilter == 1)
            {
                <div>
                    <br />
                    <h5>Total Outflow: @totalOutflow</h5>
                </div>
            }
            else if (currentFilter == 2)
            {
                <div>
                    <br />
                    <h5>Total Debt: @totalDebt</h5>
                    <h5>Pending Debt: @pendingDebt</h5>
                    <h5>Cleared Debt:@clearedDebt</h5>
                </div>
            }
        </tbody>
    </table>
</container>

@code {
    private List<TransactionItem> transaction = new List<TransactionItem>();
    private List<TransactionItem> filteredTransaction = new List<TransactionItem>();
    private string? alertMessage;
    private int currentFilter = 0;
    private string selectedSortOption = "latest";
    private decimal totalInflow;
    private decimal totalOutflow = 0;
    private decimal totalDebt = 0;
    private decimal pendingDebt;
    private decimal clearedDebt;
    private string searchText = string.Empty;
    private string selectedTag = string.Empty;
    private DateTime? fromDate;
    private DateTime? toDate;
    private bool isSearching = false;
    private List<string> tags = new List<string>();
    private string? errorMessage;


    protected override void OnInitialized()
    {
        // Load predefined tags for filtering transactions
        tags = tagService.GetTags();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //Load transactions on initialization
            await LoadTransaction();
            FilterType(0); // Default filter: Inflow
        }
        catch (Exception ex)
        {
            alertMessage = $"Error during initialization: {ex.Message}";
        }
    }

    private async Task LoadTransaction()
    {
        try
        {
            // Load all transactions from the service and apply active filters
            transaction = await transactionService.LoadTransactionAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            alertMessage = $"Error loading transactions: {ex.Message}";
        }
    }

    private void ClearAlert()
    {
        alertMessage = null;
    }

    private void SearchTransactions(ChangeEventArgs e)
    {
        // Update search text on applied filters to match user input
        searchText = e.Value?.ToString()?.ToLower() ?? string.Empty;
        isSearching = true;
        ApplyFilters();
    }

    private void FilterByTag(ChangeEventArgs e)
    {
        // Filter transactions based on the selected tag
        selectedTag = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private void FilterType(int type)
    {
        currentFilter = type;
        ApplyFilters();
    }

    private void SortTransactions(ChangeEventArgs e)
    {
        selectedSortOption = e.Value?.ToString() ?? "latest"; 
        ApplyFilters(); 
    }

    private void ApplyFilters()
    {
        // Filter the transactions list based on what the user selected.
        filteredTransaction = transaction
            .Where(t =>
                (currentFilter == 0 && t.Type == "Inflow") ||
                (currentFilter == 1 && t.Type == "Outflow") ||
                (currentFilter == 2 && t.Type == "Debt"))
             .Where(t => string.IsNullOrEmpty(searchText) ||
                    t.Title.ToLower().Contains(searchText)) 
            .Where(t => string.IsNullOrEmpty(selectedTag) || t.Tag == selectedTag || (t.Tag == "Other" && t.CustomTag == selectedTag))
            .Where(t => (!fromDate.HasValue || t.Date >= fromDate.Value) && (!toDate.HasValue || t.Date <= toDate.Value))
            .ToList();

        // Recalculate totals for the filtered transactions
        var result = calculateTransactionService.CalculateTransactionTotals(filteredTransaction);

        totalInflow = result.TotalInflow;
        totalOutflow = result.TotalOutflow;
        totalDebt = result.TotalDebt;
        pendingDebt = result.PendingDebt;
        clearedDebt = result.ClearedDebt;

        // Sort transactions by the selected sorting option
        if (selectedSortOption == "latest")
        {
            filteredTransaction = filteredTransaction.OrderByDescending(t => t.Date).ToList();
        }
        else if (selectedSortOption == "oldest")
        {
            filteredTransaction = filteredTransaction.OrderBy(t => t.Date).ToList();
        }

    }

    private void ClearFilters()
    {
        // Reset all filter options to their default values
        searchText = string.Empty;
        fromDate = null;
        toDate = null;
        ApplyFilters();
    }

    private async Task DeleteTransaction(Guid transactionId)
    {
        try
        {
            await transactionService.DeleteTransactionAsync(transactionId);
            alertMessage = "Transaction was sucessfully deleted";
            await LoadTransaction(); // Reload transactions after removing the deleted transaction from the list.
        }
        catch (Exception ex)
        {
            alertMessage = $"Error deleting transaction: {ex.Message}";
        }
    }

    private async Task MarkAsCleared(TransactionItem transaction)
    {
        try
        {           
            var transactions = await transactionService.LoadTransactionAsync();
            var result = calculateTransactionService.CalculateTransactionTotals(transactions);
            var balance = result.AvailableBalance;

            // Check if there is enough inflow balance to clear the debt
            if (transaction.Amount <= balance)
            {
                transaction.IsCleared = true;
                await transactionService.UpdateTransactionAsync(transaction);
                ApplyFilters();
                errorMessage = null;
           }
           else
           {
               // Show an error if the balance is insufficient
               errorMessage = "Not enough inflow amount to clear the debt.";
           }
       }
       catch (Exception ex)
       {
           errorMessage = $"Error clearing transaction: {ex.Message}";
       }
    }
}
