@page "/add-transaction"
@using ExpenseTracker.Model
@using ExpenseTracker.Services
@inject ITransactionService transactionService
@inject TagService tagService
@inject AuthenticationStateService authStateService
@inject CalculateTransactionService calculateTransactionService

<head>
    <link href="css/addTransactions.css" rel="stylesheet" />
</head>

<div class="container">
    <div class="form-wrapper">
        

        <form>
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" id="title" @bind="newItem.Title" placeholder="Enter title" />
            </div>

            <div class="form-group">
                <label for="amount">Amount</label>
                <input type="text" id="amount" @bind="newItem.Amount" placeholder="@authStateService.GetAuthenticatedUser().Currency" oninput="validateAmount" />
            </div>

            <div class="form-group">
                <label for="date">Date</label>
                <input type="date" id="date" @bind="newItem.Date" />
            </div>

            <div class="form-group">
                <label for="tag">Tag</label>
                <select id="tag" @bind="newItem.Tag">
                    @foreach (var tag in tags)
                    {
                        <option value="@tag">@tag</option>
                    }
                </select>

                @if (newItem.Tag == "Other")
                {
                    <div class="form-group">
                        <input type="text" id="customTag" @bind="newItem.CustomTag" placeholder="Custom tag" />
                    </div>
                }
            </div>

            <div class="form-group">
                <label for="note">Note</label>
                <textarea id="note" rows="3" @bind="newItem.Note" placeholder="Enter note (optional)"></textarea>
            </div>

            <div class="form-group">
                <label for="type">Type</label>
                <select id="type" @bind="newItem.Type">
                    <option>Inflow</option>
                    <option>Outflow</option>
                    <option>Debt</option>
                </select>
            </div>

            @if (newItem.Type == "Debt")
            {
                <div class="form-group">
                    <label for="dueDate">Due Date</label>
                    <input type="date" id="dueDate" @bind="newItem.DueDate" />
                </div>

                <div class="form-group">
                    <label for="source">Source</label>
                    <input type="text" id="source" @bind="newItem.Source" placeholder="Enter source of debt" />
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="success-message">
                    @successMessage
                </div>
            }

            <button type="button" @onclick="AddNewTask">Add</button>
        </form>
    </div>
</div>

@code {
    private TransactionItem newItem = new TransactionItem { Date = DateTime.Today };
    private string errorMessage;
    private string successMessage;
    private decimal totalBalance = 0;
    private List<string> tags = new();
    private List<TransactionItem> allTransactions = new();

    //Load predefined tags on initialization.
    protected override void OnInitialized()
    {
        tags = tagService.GetTags();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (authStateService.IsAuthenticated())
            {
                // Load user transactions
                var transactions = await transactionService.LoadTransactionAsync();
                allTransactions = transactions ?? new List<TransactionItem>(); // Ensure it's never null
                //calculate net balance
                var result = calculateTransactionService.CalculateTransactionTotals(transactions);
                totalBalance = result.NetBalance;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load transactions: {ex.Message}";
        }
    }

    private async Task AddNewTask()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newItem.Title) || string.IsNullOrWhiteSpace(newItem.Type))
            {
                errorMessage = "Title, valid amount, and Transaction Type are required.";
                successMessage = null;
                return;
            }

            if (newItem.Amount <= 0)
            {
                errorMessage = "Please enter a valid amount greater than 0.";
                successMessage = null;
                return;
            }

            if (newItem.Type == "Outflow" && newItem.Amount > totalBalance)
            {
                errorMessage = "The Outflow amount cannot exceed the total balance.";
                successMessage = null;
                return;
            }

            if (newItem.Tag == "Other" && string.IsNullOrWhiteSpace(newItem.CustomTag))
            {
                errorMessage = "Please provide a custom tag.";
                successMessage = null;
                return;
            }

            if (newItem.Type == "Debt" && (!newItem.DueDate.HasValue || string.IsNullOrWhiteSpace(newItem.Source)))
            {
                errorMessage = "Please provide both Due Date and Source for Debt.";
                successMessage = null;
                return;
            }

            newItem.TransactionId = Guid.NewGuid();

            // Save the transaction and reset the form on successful adding
            await transactionService.SaveTransactionAsync(newItem);

            newItem = new TransactionItem { Date = DateTime.Today };
            successMessage = "Transaction added successfully!";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void OnTagChange(ChangeEventArgs e)
    {
        //Custom tag is null if a tag from the predefined list is selected.
        if (e.Value?.ToString() != "Other")
        {
            newItem.CustomTag = null;
        }
    }
}
