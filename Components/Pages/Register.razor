@page "/register"
@using ExpenseTracker.Model
@using ExpenseTracker.Services
@inject IUserService userService
@inject NavigationManager navigationManager

<head>
    <link href="css/register.css" rel="stylesheet" />
</head>

<h3 class="title">Expense Tracker App</h3>

<div class="container">
    <div class="form-wrapper">
        <form>
            <div class="form-group">
                <label>User Name:</label>
                <input type="text" @bind="newUser.UserName" />
            </div>
            <div class="form-group">
                <label>Password:</label>
                <input type="password" @bind="newUser.Password" />
            </div>
            <div class="form-group"> 
                <label>Email:</label>
                <input type="email" @bind="newUser.Email" />
            </div>
            <div class="form-group">
                <label>Name:</label>
                <input type="text" @bind="newUser.Name" />
            </div>
            <div class="form-group">
                <label>Currency:</label>
                <select @bind="newUser.Currency">
                    <option value="" disabled>Select a Currency</option>
                    @foreach (var currency in availableCurrencies)
                    {
                        <option value="@currency">@currency</option>
                    }
                </select>
            </div>
            <button class="form-group" type="button" @onclick="AddNewUser">Add User</button>
            <div class="signin-link">
                Have an account? <a href="/">Sign In</a>
            </div>
        </form>
    </div>
    @if (errorMessage != null)
    {
        <p class="error-message">@errorMessage</p>
    }
</div>

@code {
    private User newUser = new User(); //object created for User Class
    private string errorMessage;

    private List<string> availableCurrencies = new List<string>
    {
        "USD",
        "NPR",
        "EUR",
        "AUD",
        "CAD",
        "INR",
        "CNY"
    };

    private async Task AddNewUser()
    {
        try
        {
            var existingUsers = await userService.LoadUserAsync();
            // condition check to see if the user already exists
            if (existingUsers.Any(user => user.UserName == newUser.UserName))
            {
                errorMessage = "A user with this User Name already exists. Please use a different User Name.";
                return; 
            }

            await userService.SaveUserAsync(newUser);
            // New user object after saving.
            newUser = new User();
            errorMessage = null; 
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while adding the user: {ex.Message}";
            Console.WriteLine(errorMessage); // for debugging purpose
        }
    }
}
